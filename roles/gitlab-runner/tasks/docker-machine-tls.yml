---
# Docker-machine will generate a local CA to sign and verify
# TLS certificates with machines it creates. The CA
# is created when the first machine is spawned, and the
# CA issuer will be the current user in the environment.
# If the user is 'root', then TLS certificates will fail
# when docker-machine is run as 'gitlab-runner'.
#
# Here, remove root certificates and spawn a machine,
# so that docker-machine generates a CA with gitlab-runner as the user.

- name: Stat gitlab-runner docker-machine certs
  stat:
    path: /home/gitlab-runner/.docker/machine/certs
  become: true
  register: docker_machine_gitlab_runner_certs

# The following task creates a TLS certificate authority
# for the user gitlab-runner; this is also a good sanity
# check that networking, AWS permissions, etc, work by
# showing docker-machine can create an EC2 instance.
- name: docker-machine create certificate machine
  when: docker_machine_gitlab_runner_certs.stat.exists == false
  command: >
    docker-machine create
    --driver amazonec2
    --amazonec2-region {{ vpc.region }}
    --amazonec2-zone {{ vpc.zone }}
    --amazonec2-vpc-id {{ vpc.vpc_info.id }}
    --amazonec2-subnet-id {{ runner.machine_subnet.subnet_info.id }}
    --amazonec2-use-private-address=true
    --amazonec2-private-address-only=true
    --amazonec2-security-group {{ runner.machine_security_group_name }}
    "{{ docker_cert_gen_instance_name }}"
  become: true
  become_user: gitlab-runner

- name: List docker-machine certificate machine
  shell: docker-machine ls --quiet --filter "name={{ docker_cert_gen_instance_name }}" --format "\{\{ .Name \}\}"
  become: true
  become_user: gitlab-runner
  changed_when: false
  failed_when: false
  register: docker_machine_ls

- name: Stop docker-machine certificate machine
  when: docker_machine_ls.stdout_lines | length > 0
  command: docker-machine stop {{ docker_cert_gen_instance_name }}
  ignore_errors: true
  failed_when: false
  become: true
  become_user: gitlab-runner

- name: Remove docker-machine certificate machine
  when: docker_machine_ls.stdout_lines | length > 0
  command: docker-machine rm --force -y {{ docker_cert_gen_instance_name }}
  become: true
  become_user: gitlab-runner

- name: Terminate EC2 certificate machine instance
  ec2_instance:
    region:        "{{ vpc.region }}"
    name:          "{{ docker_cert_gen_instance_name }}"
    vpc_subnet_id: "{{ runner.machine_subnet.subnet_info.id }}"
    state: absent

- name: Remove EC2 certificate machine keypair
  ec2_key:
    region: "{{ vpc.region }}"
    name:   "{{ docker_cert_gen_instance_name }}"
    state:  absent
    wait:   true

- name: Stat root docker-machine certs
  stat:
    path:  /root/.docker/machine/certs
  become: true
  register: docker_machine_root_certs

- name: Remove root docker-machine certs
  file:
    path: /root/.docker/machine/certs
    state: absent
  become: true
  when:
    docker_machine_root_certs.stat.isdir is defined
    and docker_machine_root_certs.stat.isdir

- name: Create root docker-machine certs folder
  file:
    path:  /root/.docker/machine
    state: directory
  become: true

- name: Symlink root docker-machine certs to gitlab-runner
  file:
    src:   /home/gitlab-runner/.docker/machine/certs
    dest:  /root/.docker/machine/certs
    owner: gitlab-runner
    group: gitlab-runner
    state: link
    force: true
  become: true

# beware the issuer being root; this will cause TLS verification to fail
# docker-machine is run as user 'gitlab-runner'
- name: Verify gitlab-runner CA issuer
  shell: "openssl x509 -in /home/gitlab-runner/.docker/machine/certs/ca.pem -text -noout | grep 'Issuer: O = gitlab-runner'"
  become: true
  become_user: gitlab-runner
  changed_when: false

# beware the issuer being root; this will cause TLS verification to fail
# docker-machine is run as user 'gitlab-runner'
- name: Verify root CA issuer
  shell: "openssl x509 -in /root/.docker/machine/certs/ca.pem -text -noout | grep 'Issuer: O = gitlab-runner'"
  become: true
  changed_when: false
